     1                                  %include "./lib64.asm"
     1                              <1>          section .text     ; сегмент кода
     2                              <1> IntToStr64: 
     3 00000000 57                  <1>          push   rdi
     4 00000001 53                  <1>          push   rbx
     5 00000002 52                  <1>          push   rdx
     6 00000003 51                  <1>          push   rcx
     7 00000004 56                  <1> 		 push   rsi
     8 00000005 C60600              <1> 		 mov    byte[rsi],0 ; на место знака
     9 00000008 83F800              <1>          cmp    eax,0
    10 0000000B 7D05                <1>          jge    .l1
    11 0000000D F7D8                <1>          neg    eax
    12 0000000F C6062D              <1>          mov    byte[rsi],'-'
    13 00000012 C646060A            <1> .l1      mov    byte[rsi+6],10
    14 00000016 BF05000000          <1>          mov    rdi,5
    15 0000001B 66BB0A00            <1>          mov    bx,10
    16 0000001F 6699                <1> .again:  cwd           ; расширили слово до двойного
    17 00000021 66F7F3              <1>          div    bx     ; делим результат на 10
    18 00000024 80C230              <1>          add    dl,30h ; получаем из остатка код цифры
    19 00000027 88143E              <1>          mov    [rsi+rdi],dl ; пишем символ в строку
    20 0000002A 48FFCF              <1>          dec    rdi    ; переводим указатель на  
    21                              <1>                        ; предыдущую позицию
    22 0000002D 6683F800            <1>          cmp    ax, 0  ; преобразовали все число?
    23 00000031 75EC                <1>          jne    .again
    24 00000033 B906000000          <1>          mov    rcx, 6
    25 00000038 4829F9              <1>          sub    rcx, rdi ; длина результата+знак
    26 0000003B 4889C8              <1> 		 mov    rax,rcx
    27 0000003E 48FFC0              <1> 		 inc    rax    ; длина результата+OA
    28 00000041 48FFC6              <1>          inc    rsi    ; пропускаем знак
    29 00000044 56                  <1> 		 push   rsi
    30 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; начало результата
    31 00000049 5F                  <1> 		 pop    rdi
    32 0000004A F3A4                <1>          rep movsb
    33 0000004C 5E                  <1>          pop    rsi  
    34 0000004D 59                  <1>          pop    rcx
    35 0000004E 5A                  <1>          pop    rdx
    36 0000004F 5B                  <1>          pop    rbx
    37 00000050 5F                  <1>          pop    rdi
    38 00000051 C3                  <1>          ret
    39                              <1> StrToInt64:
    40 00000052 57                  <1>          push   rdi
    41 00000053 B739                <1>          mov    bh, '9'
    42 00000055 B330                <1>          mov    bl, '0'
    43 00000057 56                  <1>          push   rsi     ; сохраняем адрес исходной строки
    44 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    45 0000005B 7503                <1>          jne    .prod
    46 0000005D 48FFC6              <1>          inc    rsi     ; пропускаем знак
    47 00000060 FC                  <1> .prod    cld
    48 00000061 6631FF              <1>          xor    di, di  ; обнуляем будущее число
    49 00000064 AC                  <1> .cycle:  lodsb          ; загружаем символ (цифру)
    50 00000065 3C0A                <1>          cmp    al, 10  ; если 10, то на конец
    51 00000067 741F                <1>          je     .Return
    52 00000069 38D8                <1>          cmp    al, bl  ; сравниваем с кодом нуля
    53 0000006B 722F                <1>          jb     .Error  ; "ниже" – Ошибка
    54 0000006D 38F8                <1>          cmp    al, bh  ; сравниваем с кодом девяти 
    55 0000006F 772B                <1>          ja     .Error  ; "выше" – Ошибка
    56 00000071 2C30                <1>          sub    al, 30h ; получаем цифру из символа
    57 00000073 6698                <1>          cbw            ; расширяем до слова
    58 00000075 6650                <1>          push   ax      ; сохраняем в стеке
    59 00000077 66B80A00            <1>          mov    ax, 10  ; заносим 10 в AX
    60 0000007B 66F7E7              <1>          mul    di      ; умножаем, результат в DX:AX
    61 0000007E 665F                <1>          pop    di      ; в DI – очередная цифра
    62 00000080 6601F8              <1>          add    ax, di
    63 00000083 6689C7              <1>          mov    di, ax  ; в DI – накопленное число        
    64 00000086 EBDC                <1>          jmp    .cycle
    65 00000088 5E                  <1> .Return: pop    rsi
    66 00000089 BB00000000          <1>          mov    rbx, 0
    67 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    68 00000091 7503                <1>          jne    .J
    69 00000093 66F7DF              <1>          neg    di
    70 00000096 6689F8              <1> .J       mov    ax, di
    71 00000099 98                  <1>          cwde
    72 0000009A EB0B                <1>          jmp    .R
    73 0000009C 5E                  <1> .Error:  pop    rsi
    74 0000009D B800000000          <1>          mov    rax, 0
    75 000000A2 BB01000000          <1>          mov    rbx, 1
    76 000000A7 5F                  <1> .R       pop    rdi
    77 000000A8 C3                  <1>          ret
     2                                  section .data
     3                                  ; СЃРµРіРјРµРЅС‚ РёРЅРёС†РёР°Р»РёР·РёСЂРѕРІР°РЅРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С…
     4 00000000 526573756C743A200A      ExitMsg db "Result: ",10
     5                                  lenExit equ $-ExitMsg
     6 00000009 D092D0B2D0B5D0B4D0-     EnterMsg db "Р’РІРµРґРёС‚Рµ РєРѕР»РёС‡РµСЃС‚РІРѕ СЃРёРјРІРѕР»РѕРІ:",10
     6 00000012 B8D182D0B520D0BAD0-
     6 0000001B BED0BBD0B8D187D0B5-
     6 00000024 D181D182D0B2D0BE20-
     6 0000002D D181D0B8D0BCD0B2D0-
     6 00000036 BED0BBD0BED0B23A0A 
     7                                  lenM equ $-EnterMsg
     8 0000003F D092D0B2D0B5D0B4D0-     SymMsg db "Р’РІРµРґРёС‚Рµ СЃРёРјРІРѕР»:",10
     8 00000048 B8D182D0B520D181D0-
     8 00000051 B8D0BCD0B2D0BED0BB-
     8 0000005A 3A0A               
     9                                  lenS equ $-SymMsg
    10 0000005C D092D0B2D0B5D0B4D0-     AmMsg db "Р’РІРµРґРёС‚Рµ РєРѕР»РёС‡РµСЃС‚РІРѕ РїРѕРІС‚РѕСЂРµРЅРёР№:",10
    10 00000065 B8D182D0B520D0BAD0-
    10 0000006E BED0BBD0B8D187D0B5-
    10 00000077 D181D182D0B2D0BE20-
    10 00000080 D0BFD0BED0B2D182D0-
    10 00000089 BED180D0B5D0BDD0B8-
    10 00000092 D0B93A0A           
    11                                  lenAm equ $-$AmMsg
    12                                  ; СЃРµРіРјРµРЅС‚ РЅРµРёРЅРёС†РёР°Р»РёР·РёСЂРѕРІР°РЅРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С…
    13                                  section .bss
    14 00000000 <res 00000004>          n resd 1 ;РєРѕР»РёС‡РµСЃС‚РІРѕ СЃРёРјРІРѕР»РѕРІ
    15 00000004 <res 00000004>          x resd 1 ;РєРѕР»РёС‡РµСЃС‚РІРѕ РїРѕРІС‚РѕСЂРµРЅРёР№ РѕРґРЅРѕРіРѕ СЃРёРјРІРѕР»Р°
    16 00000008 <res 00000001>          c resb 1 ;СЃРёРјРІРѕР»
    17                                  lenc equ $-c
    18 00000009 <res 00000004>          cur resd 1
    19                                  ; Р±СѓС„РµСЂ РґР»СЏ РІРІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    20 0000000D <res 00000064>          InBuf resb 100
    21                                  lenIn equ $-InBuf
    22 00000071 <res 00000064>          InBuf1 resb 100
    23                                  lenIn1 equ $-InBuf1
    24 000000D5 <res 00000064>          AnsBuf resb 100
    25                                  lenAns equ $-AnsBuf
    26                                  section .text ; СЃРµРіРјРµРЅС‚ РєРѕРґР°
    27                                  global _start
    28                                  _start:
    29                                      ; write
    30 000000A9 B801000000                  mov rax, 1 ; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 4 (write)
    31 000000AE BF01000000                  mov rdi, 1 ; РґРµСЃРєСЂРёРїС‚РѕСЂ С„Р°Р№Р»Р° stdout=1
    32 000000B3 48BE-                       mov rsi, EnterMsg ; Р°РґСЂРµСЃ РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    32 000000B5 [0900000000000000] 
    33 000000BD BA36000000                  mov rdx, lenM ; РґР»РёРЅР° РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    34 000000C2 0F05                        syscall; РІС‹Р·РѕРІ СЃРёСЃС‚РµРјРЅРѕР№ С„СѓРЅРєС†РёРё
    35                                      ; ; read
    36 000000C4 B800000000                  mov rax, 0
    37 000000C9 BF00000000                  mov rdi, 0
    38 000000CE 48BE-                       mov rsi, InBuf
    38 000000D0 [0D00000000000000] 
    39 000000D8 BA04000000                  mov rdx, 4
    40 000000DD 0F05                        syscall
    41 000000DF 48BE-                       mov rsi, InBuf
    41 000000E1 [0D00000000000000] 
    42 000000E9 E864FFFFFF                  call StrToInt64
    43 000000EE 48890425[00000000]          mov [n], rax
    44 000000F6 8B0C25[00000000]            mov ecx, [n]
    45 000000FD 41B900000000                mov r9, 0
    46 00000103 488D3C25[D5000000]          lea rdi, [AnsBuf]
    47                                  
    48                                  cycl:
    49                                       ;РІС‹РІРѕРґ СЃРѕРѕР±С‰РµРЅРёСЏ
    50 0000010B 57                          push rdi
    51 0000010C B801000000                  mov rax, 1 ; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 4 (write)
    52 00000111 BF01000000                  mov rdi, 1 ; РґРµСЃРєСЂРёРїС‚РѕСЂ С„Р°Р№Р»Р° stdout=1
    53 00000116 48BE-                       mov rsi, AmMsg ; Р°РґСЂРµСЃ РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    53 00000118 [5C00000000000000] 
    54 00000120 BA3A000000                  mov rdx, lenAm; РґР»РёРЅР° РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    55 00000125 890C25[09000000]            mov [cur], ecx
    56 0000012C 0F05                        syscall; РІС‹Р·РѕРІ СЃРёСЃС‚РµРјРЅРѕР№ С„СѓРЅРєС†РёРё
    57 0000012E 8B0C25[09000000]            mov ecx, [cur]
    58                                      ; РІРІРѕРґ РєРѕР»РёС‡РµСЃС‚РІР° РїРѕРІС‚РѕСЂРµРЅРёР№
    59 00000135 B800000000                  mov rax, 0
    60 0000013A BF00000000                  mov rdi, 0
    61 0000013F 48BE-                       mov rsi, InBuf
    61 00000141 [0D00000000000000] 
    62 00000149 BA04000000                  mov rdx, 4
    63 0000014E 890C25[09000000]            mov [cur], ecx
    64 00000155 0F05                        syscall
    65 00000157 8B0C25[09000000]            mov ecx, [cur]
    66 0000015E 48BE-                       mov rsi, InBuf
    66 00000160 [0D00000000000000] 
    67 00000168 E8E5FEFFFF                  call StrToInt64
    68 0000016D 48890425[04000000]          mov [x], rax
    69 00000175 B801000000                  mov rax, 1 ; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 4 (write)
    70 0000017A BF01000000                  mov rdi, 1 ; РґРµСЃРєСЂРёРїС‚РѕСЂ С„Р°Р№Р»Р° stdout=1
    71 0000017F 48BE-                       mov rsi, SymMsg ; Р°РґСЂРµСЃ РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    71 00000181 [3F00000000000000] 
    72 00000189 BA1D000000                  mov rdx, lenS ; РґР»РёРЅР° РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    73 0000018E 890C25[09000000]            mov [cur], ecx
    74 00000195 0F05                        syscall; РІС‹Р·РѕРІ СЃРёСЃС‚РµРјРЅРѕР№ С„СѓРЅРєС†РёРё
    75 00000197 8B0C25[09000000]            mov ecx, [cur]
    76                                      ; РІРІРѕРґ СЃРёРјРІРѕР»Р°
    77 0000019E B800000000                  mov rax, 0
    78 000001A3 BF00000000                  mov rdi, 0
    79 000001A8 48BE-                       mov rsi, InBuf
    79 000001AA [0D00000000000000] 
    80 000001B2 BA04000000                  mov rdx, 4
    81 000001B7 890C25[09000000]            mov [cur], ecx
    82 000001BE 0F05                        syscall
    83 000001C0 8B0C25[09000000]            mov ecx, [cur]
    84                                      ;mov rsi, InBuf
    85 000001C7 51                          push rcx
    86 000001C8 8B0C25[04000000]            mov ecx, [x]
    87                                  cycl2:
    88 000001CF 488D3425[0D000000]          lea rsi, [InBuf]
    89 000001D7 498DB9[D5000000]            lea rdi, [AnsBuf+r9]
    90 000001DE 51                          push rcx
    91 000001DF B901000000                  mov ecx, 1
    92 000001E4 F3A4                        rep movsb
    93 000001E6 59                          pop rcx
    94 000001E7 49FFC1                      inc r9
    95 000001EA E2E3                        loop cycl2
    96                                  
    97 000001EC 59                          pop rcx
    98 000001ED FFC9                        dec ecx
    99 000001EF 0F8516FFFFFF                jnz cycl
   100                                  
   101 000001F5 488D3425[D5000000]          lea rsi, [AnsBuf]
   102                                  exit:
   103 000001FD 56                          push rsi
   104                                      ;write text
   105 000001FE B801000000                  mov rax, 1 ; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 1 (write)
   106 00000203 BF01000000                  mov rdi, 1 ; РґРµСЃРєСЂРёРїС‚РѕСЂ С„Р°Р№Р»Р° stdout=1
   107 00000208 48BE-                       mov rsi, ExitMsg
   107 0000020A [0000000000000000] 
   108 00000212 BA09000000                  mov rdx, lenExit ; РґР»РёРЅР° СЃС‚СЂРѕРєРё
   109 00000217 0F05                        syscall ; РІС‹Р·РѕРІ СЃРёСЃС‚РµРјРЅРѕР№ С„СѓРЅРєС†РёРё
   110                                  
   111 00000219 B801000000                  mov rax, 1 ; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 1 (write)
   112 0000021E BF01000000                  mov rdi, 1 ; РґРµСЃРєСЂРёРїС‚РѕСЂ С„Р°Р№Р»Р° stdout=1
   113 00000223 5E                          pop rsi
   114 00000224 BA64000000                  mov rdx, lenAns ; РґР»РёРЅР° СЃС‚СЂРѕРєРё
   115 00000229 0F05                        syscall ; РІС‹Р·РѕРІ СЃРёСЃС‚РµРјРЅРѕР№ С„СѓРЅРєС†РёРё
   116                                  
   117                                      ; exit
   118 0000022B B83C000000                  mov rax, 60 ; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 60 (exit)
   119 00000230 4831FF                      xor rdi, rdi ; РєРѕРґ РІРѕР·РІСЂР°С‚Р° 0
   120 00000233 0F05                        syscall ; РІС‹Р·РѕРІ СЃРёСЃС‚РµРјРЅРѕР№ С„СѓРЅРєС†РёРё Р·Р°РІРµСЂС€РµРЅРёСЏ
   121                                      ;;СЃРѕР·РґР°С‚СЊ СЃС‚СЂРѕРєСѓ ans, СЃРЅР°С‡Р°Р»Р° РІРІРµСЃС‚Рё n, РїРѕС‚РѕРј С†РёРєР» РїРѕ n СЌР»РµРјРµРЅС‚РѕРІ РіРґРµ РІРІРѕРґРёРј Р±СѓРєРІСѓ Рё С†РёС„СЂСѓ, РїРѕС‚РѕРј Р±СѓРєРІСѓ m РєРѕР»РІРѕ СЂР°Р· РїРёС…Р°РµРј РІ ans
