     1                                  %include "./lib64.asm"
     1                              <1>          section .text     ; сегмент кода
     2                              <1> IntToStr64: 
     3 00000000 57                  <1>          push   rdi
     4 00000001 53                  <1>          push   rbx
     5 00000002 52                  <1>          push   rdx
     6 00000003 51                  <1>          push   rcx
     7 00000004 56                  <1> 		 push   rsi
     8 00000005 C60600              <1> 		 mov    byte[rsi],0 ; на место знака
     9 00000008 83F800              <1>          cmp    eax,0
    10 0000000B 7D05                <1>          jge    .l1
    11 0000000D F7D8                <1>          neg    eax
    12 0000000F C6062D              <1>          mov    byte[rsi],'-'
    13 00000012 C646060A            <1> .l1      mov    byte[rsi+6],10
    14 00000016 BF05000000          <1>          mov    rdi,5
    15 0000001B 66BB0A00            <1>          mov    bx,10
    16 0000001F 6699                <1> .again:  cwd           ; расширили слово до двойного
    17 00000021 66F7F3              <1>          div    bx     ; делим результат на 10
    18 00000024 80C230              <1>          add    dl,30h ; получаем из остатка код цифры
    19 00000027 88143E              <1>          mov    [rsi+rdi],dl ; пишем символ в строку
    20 0000002A 48FFCF              <1>          dec    rdi    ; переводим указатель на  
    21                              <1>                        ; предыдущую позицию
    22 0000002D 6683F800            <1>          cmp    ax, 0  ; преобразовали все число?
    23 00000031 75EC                <1>          jne    .again
    24 00000033 B906000000          <1>          mov    rcx, 6
    25 00000038 4829F9              <1>          sub    rcx, rdi ; длина результата+знак
    26 0000003B 4889C8              <1> 		 mov    rax,rcx
    27 0000003E 48FFC0              <1> 		 inc    rax    ; длина результата+OA
    28 00000041 48FFC6              <1>          inc    rsi    ; пропускаем знак
    29 00000044 56                  <1> 		 push   rsi
    30 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; начало результата
    31 00000049 5F                  <1> 		 pop    rdi
    32 0000004A F3A4                <1>          rep movsb
    33 0000004C 5E                  <1>          pop    rsi  
    34 0000004D 59                  <1>          pop    rcx
    35 0000004E 5A                  <1>          pop    rdx
    36 0000004F 5B                  <1>          pop    rbx
    37 00000050 5F                  <1>          pop    rdi
    38 00000051 C3                  <1>          ret
    39                              <1> StrToInt64:
    40 00000052 57                  <1>          push   rdi
    41 00000053 B739                <1>          mov    bh, '9'
    42 00000055 B330                <1>          mov    bl, '0'
    43 00000057 56                  <1>          push   rsi     ; сохраняем адрес исходной строки
    44 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    45 0000005B 7503                <1>          jne    .prod
    46 0000005D 48FFC6              <1>          inc    rsi     ; пропускаем знак
    47 00000060 FC                  <1> .prod    cld
    48 00000061 6631FF              <1>          xor    di, di  ; обнуляем будущее число
    49 00000064 AC                  <1> .cycle:  lodsb          ; загружаем символ (цифру)
    50 00000065 3C0A                <1>          cmp    al, 10  ; если 10, то на конец
    51 00000067 741F                <1>          je     .Return
    52 00000069 38D8                <1>          cmp    al, bl  ; сравниваем с кодом нуля
    53 0000006B 722F                <1>          jb     .Error  ; "ниже" – Ошибка
    54 0000006D 38F8                <1>          cmp    al, bh  ; сравниваем с кодом девяти 
    55 0000006F 772B                <1>          ja     .Error  ; "выше" – Ошибка
    56 00000071 2C30                <1>          sub    al, 30h ; получаем цифру из символа
    57 00000073 6698                <1>          cbw            ; расширяем до слова
    58 00000075 6650                <1>          push   ax      ; сохраняем в стеке
    59 00000077 66B80A00            <1>          mov    ax, 10  ; заносим 10 в AX
    60 0000007B 66F7E7              <1>          mul    di      ; умножаем, результат в DX:AX
    61 0000007E 665F                <1>          pop    di      ; в DI – очередная цифра
    62 00000080 6601F8              <1>          add    ax, di
    63 00000083 6689C7              <1>          mov    di, ax  ; в DI – накопленное число        
    64 00000086 EBDC                <1>          jmp    .cycle
    65 00000088 5E                  <1> .Return: pop    rsi
    66 00000089 BB00000000          <1>          mov    rbx, 0
    67 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    68 00000091 7503                <1>          jne    .J
    69 00000093 66F7DF              <1>          neg    di
    70 00000096 6689F8              <1> .J       mov    ax, di
    71 00000099 98                  <1>          cwde
    72 0000009A EB0B                <1>          jmp    .R
    73 0000009C 5E                  <1> .Error:  pop    rsi
    74 0000009D B800000000          <1>          mov    rax, 0
    75 000000A2 BB01000000          <1>          mov    rbx, 1
    76 000000A7 5F                  <1> .R       pop    rdi
    77 000000A8 C3                  <1>          ret
     2                                  section .data
     3 00000000 456E74657220612073-         StartMsg db "Enter a string", 10
     3 00000009 7472696E670A       
     4                                      StartLen equ $-StartMsg
     5                                  section .bss
     6 00000000 <res 00000064>              InBuf resb 100
     7                                      lenIn equ $-InBuf
     8 00000064 <res 00000004>              max resd 1
     9 00000068 <res 0000000A>              OutBuf resb 10
    10                                      lenOut equ $-OutBuf
    11 00000072 <res 00000001>              c resb 1
    12 00000073 <res 00000001>              Space resb 1
    13 00000074 <res 00000008>              indp resq 1
    14 0000007C <res 00000004>              ind resd 1
    15 00000080 <res 00000004>              cur resd 1
    16 00000084 <res 0000000A>              curs resb 10
    17                                      lencur equ $-curs
    18                                  
    19                                      section .text
    20                                          global _start
    21                                          _start:
    22                                              ;РІС‹РІРѕРґ СЃРѕРѕР±С‰РµРЅРёСЏ РІ РєРѕРЅСЃРѕР»СЊ
    23 000000A9 B801000000                          mov rax, 1
    24 000000AE BF01000000                          mov rdi, 1
    25 000000B3 48BE-                               mov rsi, StartMsg
    25 000000B5 [0000000000000000] 
    26 000000BD BA0F000000                          mov rdx, StartLen
    27 000000C2 0F05                                syscall
    28                                  
    29                                              ;РІРІРѕРґ СЃС‚СЂРѕРєРё
    30 000000C4 B800000000                          mov rax, 0
    31 000000C9 BF00000000                          mov rdi, 0
    32 000000CE 48BE-                               mov rsi, InBuf
    32 000000D0 [0000000000000000] 
    33 000000D8 BA64000000                          mov rdx, lenIn
    34 000000DD 0F05                                syscall
    35 000000DF B864000000                          mov eax, lenIn
    36                                              ;РґРѕР±Р°РІР»РµРЅРёРµ РїСЂРѕР±РµР»Р° Рє СЃС‚СЂРѕРєРµ
    37 000000E4 488D3C25[00000000]                  lea rdi,[InBuf] ; Р·Р°РіСЂСѓР¶Р°РµРј Р°РґСЂРµСЃ СЃС‚СЂРѕРєРё РІ edi
    38 000000EC B964000000                          mov rcx,lenIn ; Р·Р°РіСЂСѓР¶Р°РµРј СЂР°Р·РјРµСЂ Р±СѓС„РµСЂР° РІРІРѕРґР°
    39 000000F1 B00A                                mov al,0Ah ; Р·Р°РіСЂСѓР¶Р°РµРј 0Ah РґР»СЏ РїРѕРёСЃРєР° РІ Р±СѓС„РµСЂРµ РІРІРѕРґР°
    40 000000F3 F2AE                                repne scasb ; РёС‰РµРј РєРѕРґ Enter РІ СЃС‚СЂРѕРєРµ
    41 000000F5 B864000000                          mov rax,100
    42 000000FA 4829C8                              sub rax,rcx ; РІС‹С‡РёС‚Р°РµРј РёР· СЂР°Р·РјРµСЂР° Р±СѓС„РµСЂР° РѕСЃС‚Р°С‚РѕРє cx
    43 000000FD 4889C1                              mov rcx,rax ; РїРѕР»СѓС‡РµРЅРЅР°СЏ СЂР°Р·РЅРёС†Р° вЂ“ РґР»РёРЅР° СЃС‚СЂРѕРєРё +1
    44 00000100 C681[FFFFFFFF]20                    mov BYTE[rcx+InBuf-1],' '
    45                                  
    46                                              ;РїРѕРёСЃРє СЃР»РѕРІР°
    47 00000107 488D3C25[00000000]                  lea rdi,[InBuf] ; Р·Р°РіСЂСѓР¶Р°РµРј Р°РґСЂРµСЃ СЃС‚СЂРѕРєРё РІ edi
    48 0000010F BA64000000                          mov rdx, lenIn
    49 00000114 89D0                                mov eax, edx
    50 00000116 41B900000000                        mov r9, 0 ;СЃРјРµС‰РµРЅРёРµ
    51 0000011C C60425[73000000]20                  mov BYTE[Space], ' '
    52 00000124 B300                                mov bl, 0 ; РґР»РёРЅР° СЃР»РѕРІР°
    53 00000126 C70425[64000000]00-                 mov dword [max], 0
    53 0000012E 000000             
    54 00000131 C70425[7C000000]00-                 mov dword [ind], 0 ; РёРЅРґРµРєСЃ СЃР»РѕРІР°
    54 00000139 000000             
    55 0000013C B020                                mov al, ' '
    56 0000013E B020                                cycl1: mov al, ' '
    57 00000140 4238040F                                   cmp BYTE[rdi+r9], al
    58 00000144 7411                                       je next_word
    59 00000146 FEC3                                       inc bl
    60 00000148 49FFC1                          continue:  inc r9
    61 0000014B 42803C0F00                                 cmp BYTE[rdi+r9], 0x00 ; РїСЂРѕРІРµСЂРєР° РЅР° РєРѕРЅРµС† СЃС‚СЂРѕРєРё
    62 00000150 75EC                                       jne cycl1
    63 00000152 E997000000                                 jmp exit
    64                                          
    65 00000157 8B0425[7C000000]                next_word: mov eax, [ind]
    66 0000015E 890425[74000000]                           mov [indp], eax
    67 00000165 88D8                                       mov al, bl
    68 00000167 4C890C25[7C000000]                         mov [ind], r9 ; РёРЅРґРµРєСЃ РїСЂРѕР±РµР»Р°
    69 0000016F 800425[7C000000]01                         add BYTE[ind], 1 ;РїСЂРёР±Р°РІР»СЏРµРј РµРґРёРЅРёС†Сѓ, С‡С‚РѕР±С‹ РїРѕР»СѓС‡РёС‚СЊ РёРЅРґРµРєСЃ РїРµСЂРІРѕРіРѕ СЃРёРјРІРѕР»Р° СЃР»РѕРІР°
    70 00000177 881C25[80000000]                           mov [cur], bl ; С‚РµРїРµСЂСЊ РІ cur С…СЂР°РЅРёС‚СЃСЏ РґР»РёРЅР° СЃР»РѕРІР°
    71 0000017E B302                                       mov bl, 2
    72                                                     ;mov eax, [cur]
    73                                                     ;mov eax, [indp]
    74 00000180 F6F3                                       div bl
    75 00000182 B300                                       mov bl, 0 ; РѕР±РЅСѓР»СЏРµРј РґР»РёРЅСѓ СЃР»РѕРІР°
    76                                                     ;mov eax, [indp]
    77                                                     ;mov eax, [cur]
    78 00000184 80FC00                                     cmp ah, 0 ;РїСЂРѕРІРµСЂСЏРµРј С‡РµС‚РЅРѕСЃС‚СЊ РґР»РёРЅС‹
    79 00000187 75BF                                       jne continue
    80 00000189 8B0425[64000000]                           mov eax, [max]
    81 00000190 390425[80000000]                           cmp [cur], eax ;СЃСЂР°РІРЅРёРІР°РµРј РґР»РёРЅСѓ СЃ РјР°РєСЃРёРјСѓРјРѕРј
    82 00000197 7CAF                                       jl continue 
    83 00000199 8B0425[80000000]                           mov eax, [cur]
    84 000001A0 890425[64000000]                           mov [max], eax; РЅРѕРІР°СЏ РјР°РєСЃРёРјР°Р»СЊРЅР°СЏ РґР»РёРЅР°
    85 000001A7 8B0C25[80000000]                           mov ecx, [cur]
    86 000001AE 41B800000000                               mov r8, 0
    87 000001B4 4151                                       push r9
    88 000001B6 8B0425[74000000]                           mov eax, [indp]
    89 000001BD 4C8B0C25[74000000]                         mov r9, [indp] ;РІ r9 РёРЅРґРµРєСЃ РЅР°С‡Р°Р»Р° РїСЂРµРґС‹РґСѓС‰РµРіРѕ СЃР»РѕРІР° (РћРўРљРЈР”Рђ Р—Р”Р•РЎР¬ 300)
    90 000001C5 488D3425[68000000]                         lea rsi, [OutBuf]
    91 000001CD 488D3C25[00000000]                         lea rdi, [InBuf] 
    92 000001D5 428A040F                        cycl2:     mov al, BYTE[rdi+r9]
    93 000001D9 42880406                                   mov BYTE[rsi+r8], al
    94 000001DD 49FFC0                                     inc r8
    95 000001E0 49FFC1                                     inc r9
    96 000001E3 E2F0                                       loop cycl2
    97 000001E5 B300                                       mov bl, 0
    98 000001E7 4159                                       pop r9
    99 000001E9 E95AFFFFFF                                 jmp continue
   100                                  
   101 000001EE B801000000                      exit:      mov rax, 1
   102 000001F3 BF01000000                                 mov rdi, 1
   103 000001F8 48BE-                                      mov rsi, OutBuf
   103 000001FA [6800000000000000] 
   104 00000202 BA0A000000                                 mov rdx, lenOut
   105 00000207 0F05                                       syscall
   106 00000209 B801000000                                 mov eax, 1
   107 0000020E 31DB                                       xor ebx, ebx
   108 00000210 CD80                                       int 80h
   109                                  
   110                                  
   111                                  
   112                                  
