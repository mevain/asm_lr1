     1                                  %include "./lib64.asm"
     1                              <1>          section .text     ; сегмент кода
     2                              <1> IntToStr64: 
     3 00000000 57                  <1>          push   rdi
     4 00000001 53                  <1>          push   rbx
     5 00000002 52                  <1>          push   rdx
     6 00000003 51                  <1>          push   rcx
     7 00000004 56                  <1> 		 push   rsi
     8 00000005 C60600              <1> 		 mov    byte[rsi],0 ; на место знака
     9 00000008 83F800              <1>          cmp    eax,0
    10 0000000B 7D05                <1>          jge    .l1
    11 0000000D F7D8                <1>          neg    eax
    12 0000000F C6062D              <1>          mov    byte[rsi],'-'
    13 00000012 C646060A            <1> .l1      mov    byte[rsi+6],10
    14 00000016 BF05000000          <1>          mov    rdi,5
    15 0000001B 66BB0A00            <1>          mov    bx,10
    16 0000001F 6699                <1> .again:  cwd           ; расширили слово до двойного
    17 00000021 66F7F3              <1>          div    bx     ; делим результат на 10
    18 00000024 80C230              <1>          add    dl,30h ; получаем из остатка код цифры
    19 00000027 88143E              <1>          mov    [rsi+rdi],dl ; пишем символ в строку
    20 0000002A 48FFCF              <1>          dec    rdi    ; переводим указатель на  
    21                              <1>                        ; предыдущую позицию
    22 0000002D 6683F800            <1>          cmp    ax, 0  ; преобразовали все число?
    23 00000031 75EC                <1>          jne    .again
    24 00000033 B906000000          <1>          mov    rcx, 6
    25 00000038 4829F9              <1>          sub    rcx, rdi ; длина результата+знак
    26 0000003B 4889C8              <1> 		 mov    rax,rcx
    27 0000003E 48FFC0              <1> 		 inc    rax    ; длина результата+OA
    28 00000041 48FFC6              <1>          inc    rsi    ; пропускаем знак
    29 00000044 56                  <1> 		 push   rsi
    30 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; начало результата
    31 00000049 5F                  <1> 		 pop    rdi
    32 0000004A F3A4                <1>          rep movsb
    33 0000004C 5E                  <1>          pop    rsi  
    34 0000004D 59                  <1>          pop    rcx
    35 0000004E 5A                  <1>          pop    rdx
    36 0000004F 5B                  <1>          pop    rbx
    37 00000050 5F                  <1>          pop    rdi
    38 00000051 C3                  <1>          ret
    39                              <1> StrToInt64:
    40 00000052 57                  <1>          push   rdi
    41 00000053 B739                <1>          mov    bh, '9'
    42 00000055 B330                <1>          mov    bl, '0'
    43 00000057 56                  <1>          push   rsi     ; сохраняем адрес исходной строки
    44 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    45 0000005B 7503                <1>          jne    .prod
    46 0000005D 48FFC6              <1>          inc    rsi     ; пропускаем знак
    47 00000060 FC                  <1> .prod    cld
    48 00000061 6631FF              <1>          xor    di, di  ; обнуляем будущее число
    49 00000064 AC                  <1> .cycle:  lodsb          ; загружаем символ (цифру)
    50 00000065 3C0A                <1>          cmp    al, 10  ; если 10, то на конец
    51 00000067 741F                <1>          je     .Return
    52 00000069 38D8                <1>          cmp    al, bl  ; сравниваем с кодом нуля
    53 0000006B 722F                <1>          jb     .Error  ; "ниже" – Ошибка
    54 0000006D 38F8                <1>          cmp    al, bh  ; сравниваем с кодом девяти 
    55 0000006F 772B                <1>          ja     .Error  ; "выше" – Ошибка
    56 00000071 2C30                <1>          sub    al, 30h ; получаем цифру из символа
    57 00000073 6698                <1>          cbw            ; расширяем до слова
    58 00000075 6650                <1>          push   ax      ; сохраняем в стеке
    59 00000077 66B80A00            <1>          mov    ax, 10  ; заносим 10 в AX
    60 0000007B 66F7E7              <1>          mul    di      ; умножаем, результат в DX:AX
    61 0000007E 665F                <1>          pop    di      ; в DI – очередная цифра
    62 00000080 6601F8              <1>          add    ax, di
    63 00000083 6689C7              <1>          mov    di, ax  ; в DI – накопленное число        
    64 00000086 EBDC                <1>          jmp    .cycle
    65 00000088 5E                  <1> .Return: pop    rsi
    66 00000089 BB00000000          <1>          mov    rbx, 0
    67 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    68 00000091 7503                <1>          jne    .J
    69 00000093 66F7DF              <1>          neg    di
    70 00000096 6689F8              <1> .J       mov    ax, di
    71 00000099 98                  <1>          cwde
    72 0000009A EB0B                <1>          jmp    .R
    73 0000009C 5E                  <1> .Error:  pop    rsi
    74 0000009D B800000000          <1>          mov    rax, 0
    75 000000A2 BB01000000          <1>          mov    rbx, 1
    76 000000A7 5F                  <1> .R       pop    rdi
    77 000000A8 C3                  <1>          ret
     2                                  
     3                                  %define STDIN 0
     4                                  %define READ 0
     5                                  %define STDOUT 1
     6                                  %define WRITE 1
     7                                  %define EXIT 60
     8                                  
     9                                  %define ROWS 4
    10                                  %define COLUMNS 7
    11                                  %define MATRIX_SIZE 35
    12                                  
    13                                  section .data
    14 00000000 456E74657220342A37-         StartMsg db "Enter 4*7 matrix:", 10
    14 00000009 206D61747269783A0A 
    15                                      StartLen equ $-StartMsg
    16 00000012 0A                          NewLine: db 0xA
    17 00000013 526573756C743A0A            ResultMsg db "Result:", 10
    18                                      ResultLen equ $-ResultMsg
    19                                  
    20 0000001B 45616368206C696E65-         IncorrectLineMsg db "Each line should have exactly 7 numbers divided by spaces", 10
    20 00000024 2073686F756C642068-
    20 0000002D 617665206578616374-
    20 00000036 6C792037206E756D62-
    20 0000003F 657273206469766964-
    20 00000048 656420627920737061-
    20 00000051 6365730A           
    21                                      IncorrectLineLen equ $-IncorrectLineMsg
    22                                  
    23 00000055 4572726F7220776869-         ErrorSTIMsg dq "Error while transform str to int", 10
    23 0000005E 6C65207472616E7366-
    23 00000067 6F726D207374722074-
    23 00000070 6F20696E740A000000-
    23 00000079 00000000           
    24                                      ErrorSTILen equ $-ErrorSTIMsg
    25                                  
    26 0000007D 2020                        Space db "  "
    27                                  
    28                                  section .bss
    29 00000000 <res 00000118>              matrix times MATRIX_SIZE resq 1
    30 00000118 <res 00000004>              cur resd 1
    31 0000011C <res 00000004>              cur1 resd 1
    32 00000120 <res 00000004>              cur2 resd 1
    33 00000124 <res 00000002>              OutBuf resw 1
    34                                      lenOut equ $-OutBuf
    35 00000126 <res 00000050>              InBuf resq 10
    36                                      lenIn equ $-InBuf
    37                                  
    38                                  
    39                                  section .text
    40                                  global _start
    41                                  
    42                                  _start:
    43 000000A9 B801000000                  mov rax, WRITE
    44 000000AE BF01000000                  mov rdi, STDOUT
    45 000000B3 48BE-                       mov rsi, StartMsg
    45 000000B5 [0000000000000000] 
    46 000000BD BA12000000                  mov rdx, StartLen
    47 000000C2 0F05                        syscall
    48                                  
    49 000000C4 B904000000                  mov rcx, ROWS
    50 000000C9 4831FF                      xor rdi, rdi
    51                                  
    52                                  read_line:
    53 000000CC 51                          push rcx
    54 000000CD 57                          push rdi
    55                                  
    56 000000CE B800000000                  mov rax, READ
    57 000000D3 BF00000000                  mov rdi, STDIN
    58 000000D8 48BE-                       mov rsi, InBuf
    58 000000DA [2601000000000000] 
    59 000000E2 BA50000000                  mov rdx, lenIn
    60 000000E7 0F05                        syscall
    61                                  
    62 000000E9 5F                          pop rdi
    63 000000EA 4889C1                      mov rcx, rax ; РЎРѕС…СЂР°РЅСЏРј РґР»РёРЅСѓ СЃС‚СЂРѕРєРё
    64 000000ED 4831D2                      xor rdx, rdx ; РћР±РЅСѓР»СЏРµРј СЂРµРіРёСЃС‚СЂ
    65 000000F0 4D31C0                      xor r8, r8 ; РћР±РЅСѓР»СЏРµРј СЂРµРіРёСЃС‚СЂ
    66                                  
    67                                  process_line:
    68 000000F3 80BA[26010000]0A            cmp byte[InBuf + rdx], 10; Р•СЃР»Рё РєРѕРЅРµС† СЃС‚СЂРѕРєРё С‚Рѕ РѕР±СЂР°Р±Р°С‚С‹РІР°РµРј С‡РёСЃР»Рѕ
    69 000000FA 7417                        je process_number
    70                                  
    71 000000FC 80BA[26010000]20            cmp byte[InBuf + rdx], ' '; Р•СЃР»Рё Р±С‹Р» РЅРµ РєРѕРЅРµС†, Рё СЃР»РµРґСѓСЋС‰РёР№ СЃРёРјРІРѕР» 
    72 00000103 7537                        jne next; РЅРµ РїСЂРѕР±РµР», С‚Рѕ РїСЂРѕРґРѕР»Р¶Р°РµРј СЃС‡РёС‚С‹РІР°РЅРёРµ
    73                                  
    74 00000105 C682[26010000]0A            mov byte[InBuf + rdx], 10; РџРѕРјРµС‰Р°РµРј РІРјРµСЃС‚Рѕ РїСЂРѕР±Р»РµР° \n
    75 0000010C 4939D0                      cmp r8, rdx; Р•СЃР»Рё РґР»РёРЅР° СЃС‚СЂРѕРєРё РЅРµ СЃРѕРІРїР°РґР°РµС‚ СЃ РїСЂРµРґС‹РґСѓС‰РµР№
    76 0000010F 7502                        jne process_number
    77 00000111 EB29                        jmp next; ???
    78                                  
    79                                  process_number:
    80 00000113 52                          push rdx
    81                                  
    82 00000114 E839FFFFFF                  call StrToInt64; Р’С…РѕРґ: RSI Р’С‹С…РѕРґ: RAX, RBX СЃРѕРґРµСЂР¶РёС‚ 0 if errors = 0
    83 00000119 4883FB00                    cmp rbx, 0
    84 0000011D 0F8564010000                jne STIError; Р’С‹РІРѕРґ РѕС€РёР±РєРё
    85                                  
    86 00000123 488904FD[00000000]          mov [matrix + 8 * rdi], rax; РџРѕРјРµС‰Р°РµРј СЂРµР·СѓР»СЊС‚Р°С‚ РІ РјР°С‚СЂРёС†Сѓ
    87 0000012B 48FFC7                      inc rdi; СѓРІРµР»РёС‡РёРІР°РµРј СЃС‡РµС‚С‡РёРє РІРІРµРґРµРЅРЅС‹С… С‡РёСЃРµР»
    88                                  
    89 0000012E 5A                          pop rdx
    90 0000012F 4989D0                      mov r8, rdx; РўРµРїРµСЂСЊ СЃС‡РёС‚С‹РІР°С‚СЊ СЃР»РµРґСѓСЋС‰РµРµ С‡РёСЃР»Рѕ РЅР°РґРѕ РЅР°С‡РёРЅР°С‚СЊ СЃ 
    91 00000132 49FFC0                      inc r8; РѕРєРѕРЅС‡Р°РЅРёСЏ РґР»РёРЅС‹ РїСЂРµРґС‹РґСѓС‰РµРіРѕ
    92 00000135 498DB0[26010000]            lea rsi, [InBuf + r8]; РџРµСЂРµРґР°РµРј СѓРєР°Р·Р°С‚РµР»СЊ РЅР° СЃРјРµС‰РµРЅРЅС‹Р№ Р±СѓС„РµСЂ
    93                                  
    94                                  next:
    95 0000013C 48FFC2                      inc rdx; РЈРІРµР»РёС‡РёРІР°РµРј РґР»РёРЅСѓ С‡РёСЃР»Р°
    96 0000013F E2B2                        loop process_line
    97                                  
    98 00000141 59                          pop rcx
    99 00000142 B804000000                  mov rax, ROWS; РџСЂРѕРІРµСЂРёРј РєРѕР»РёС‡РµСЃС‚РІРѕ РІРІРµРґРµРЅС‹С… С‡РёСЃРµР» < 7 РІ С‚РµРєСѓС‰РµР№ СЃС‚СЂРѕРєРµ
   100 00000147 4829C8                      sub rax, rcx
   101 0000014A 48FFC0                      inc rax
   102 0000014D 52                          push rdx
   103 0000014E BA07000000                  mov rdx, COLUMNS
   104 00000153 48F7EA                      imul rdx
   105 00000156 5A                          pop rdx 
   106                                  
   107 00000157 4839C7                      cmp rdi, rax; Р•СЃР»Рё РІРІРµРґРµРЅРѕ С‡РёСЃРµР» Р±РѕР»СЊС€Рµ С‡РµРј РґР»РёРЅРЅР° СЃС‚СЂРѕРєРё РјР°С‚СЂРёС†С‹
   108 0000015A 0F850A010000                jne IncorrectLine
   109                                  
   110                                      ; loop read_line; 
   111 00000160 48FFC9                      dec rcx
   112 00000163 4883F900                    cmp rcx, 0
   113 00000167 0F855FFFFFFF                jnz read_line
   114                                  
   115                                  output:
   116 0000016D B801000000                  mov rax, WRITE
   117 00000172 BF01000000                  mov rdi, STDOUT
   118 00000177 48BE-                       mov rsi, ResultMsg
   118 00000179 [1300000000000000] 
   119 00000181 BA08000000                  mov rdx, ResultLen
   120 00000186 0F05                        syscall
   121                                  
   122 00000188 B904000000                  mov rcx, ROWS
   123 0000018D 4831DB                      xor rbx, rbx; РћР±РЅСѓР»СЏРµРј СЂРµРіРёСЃС‚СЂ
   124 00000190 B000                        mov al, 0 ; СЃС‡РµС‚С‡РёРє СЃС‚СЂРѕРє
   125 00000192 B300                        mov bl, 0 ; СЃС‡РµС‚С‡РёРє СЃС‚РѕР»Р±С†РѕРІ
   126 00000194 880425[18010000]            mov [cur], al
   127 0000019B 881C25[1C010000]            mov [cur1], bl
   128                                  output_row:
   129 000001A2 51                          push rcx
   130 000001A3 B907000000                  mov rcx, COLUMNS
   131                                  output_column:
   132 000001A8 51                          push rcx
   133 000001A9 8B0425[18010000]            mov eax, [cur]
   134 000001B0 030425[1C010000]            add eax, [cur1]
   135 000001B7 881C25[20010000]            mov [cur2], bl
   136 000001BE B303                        mov bl, 3
   137 000001C0 98                          cwde
   138 000001C1 F6F3                        div bl
   139 000001C3 8A1C25[20010000]            mov bl, [cur2]
   140 000001CA 882425[20010000]            mov [cur2], ah
   141 000001D1 48BE-                       mov rsi, OutBuf
   141 000001D3 [2401000000000000] 
   142 000001DB 4831C0                      xor rax, rax
   143 000001DE 488B04DD[00000000]          mov rax, [matrix + 8 * rbx]
   144 000001E6 48FFC3                      inc rbx
   145 000001E9 833C25[20010000]00          cmp dword [cur2], 0
   146 000001F1 7525                        jne continue1
   147 000001F3 E808FEFFFF                  call IntToStr64
   148 000001F8 B801000000                  mov rax, WRITE; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 1 (write)
   149 000001FD BF01000000                  mov rdi, STDOUT; РґРµСЃРєСЂРёРїС‚РѕСЂ С„Р°Р№Р»Р° stdout=1
   150 00000202 48BE-                       mov rsi, OutBuf ; Р°РґСЂРµСЃ РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
   150 00000204 [2401000000000000] 
   151 0000020C BA02000000                  mov rdx, lenOut ; РґР»РёРЅР° СЃС‚СЂРѕРєРё
   152 00000211 0F05                        syscall; РІС‹Р·РѕРІ СЃРёСЃС‚РµРјРЅРѕР№ С„СѓРЅРєС†РёРё
   153 00000213 E88C000000                  call PrintSpace
   154                                  continue1:
   155 00000218 FF0425[1C010000]            inc dword [cur1] ;СЃР±РёРІР°РµС‚ РІСЃРµ СЂРµРіРёСЃС‚СЂС‹. РЅР°РґРѕ РґРµР»Р°С‚СЊ СЃС‡РµС‚С‡РёРє РІ РїРµСЂРµРјРµРЅРЅС‹С….
   156 0000021F 59                          pop rcx
   157 00000220 E286                        loop output_column
   158 00000222 B801000000                  mov rax, WRITE; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 1 (write)
   159 00000227 BF01000000                  mov rdi, STDOUT; РґРµСЃРєСЂРёРїС‚РѕСЂ С„Р°Р№Р»Р° stdout=1
   160 0000022C 48BE-                       mov rsi, NewLine ; Р°РґСЂРµСЃ РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
   160 0000022E [1200000000000000] 
   161 00000236 BA01000000                  mov rdx, 1 ; РґР»РёРЅР° СЃС‚СЂРѕРєРё
   162 0000023B 0F05                        syscall; РІС‹Р·РѕРІ СЃРёСЃС‚РµРјРЅРѕР№ С„СѓРЅРєС†РёРё
   163 0000023D 59                          pop rcx
   164 0000023E FF0425[18010000]            inc dword [cur]
   165 00000245 C70425[1C010000]00-         mov dword [cur1], 0
   165 0000024D 000000             
   166 00000250 48FFC9                      dec rcx
   167 00000253 0F8549FFFFFF                jnz output_row
   168                                  
   169                                  exit:
   170 00000259 4831FF                      xor rdi, rdi
   171 0000025C B83C000000                  mov rax, EXIT
   172 00000261 0F05                        syscall
   173                                  
   174                                   not_div:
   175 00000263 0401                         add al, 1
   176 00000265 E93EFFFFFF                   jmp output_column
   177                                  
   178                                  IncorrectLine:
   179 0000026A B801000000                  mov rax, WRITE
   180 0000026F BF01000000                  mov rdi, STDOUT   
   181 00000274 48BE-                       mov rsi, IncorrectLineMsg
   181 00000276 [1B00000000000000] 
   182 0000027E BA3A000000                  mov rdx, IncorrectLineLen
   183 00000283 0F05                        syscall
   184 00000285 EBD2                        jmp exit
   185                                  
   186                                  STIError:
   187 00000287 B801000000                  mov rax, 1; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 1 (write)
   188 0000028C BF01000000                  mov rdi, 1; РґРµСЃРєСЂРёРїС‚РѕСЂ С„Р°Р№Р»Р° stdout=1
   189 00000291 48BE-                       mov rsi, ErrorSTIMsg ; Р°РґСЂРµСЃ РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
   189 00000293 [5500000000000000] 
   190 0000029B BA28000000                  mov rdx, ErrorSTILen ; РґР»РёРЅР° СЃС‚СЂРѕРєРё
   191 000002A0 0F05                        syscall; РІС‹Р·РѕРІ СЃРёСЃС‚РµРјРЅРѕР№ С„СѓРЅРєС†РёРё
   192 000002A2 EBB5                        jmp exit
   193                                  ;end
   194                                  
   195                                  PrintSpace:    
   196 000002A4 B801000000                  mov rax, 1
   197 000002A9 BF01000000                  mov rdi, 1
   198 000002AE 48BE-                       mov rsi, Space
   198 000002B0 [7D00000000000000] 
   199 000002B8 BA01000000                  mov rdx, 1
   200 000002BD 0F05                        syscall
   201 000002BF C3                          ret
