     1                                  %include "./lib64.asm"
     1                              <1>          section .text     ; сегмент кода
     2                              <1> IntToStr64: 
     3 00000000 57                  <1>          push   rdi
     4 00000001 53                  <1>          push   rbx
     5 00000002 52                  <1>          push   rdx
     6 00000003 51                  <1>          push   rcx
     7 00000004 56                  <1> 		 push   rsi
     8 00000005 C60600              <1> 		 mov    byte[rsi],0 ; на место знака
     9 00000008 83F800              <1>          cmp    eax,0
    10 0000000B 7D05                <1>          jge    .l1
    11 0000000D F7D8                <1>          neg    eax
    12 0000000F C6062D              <1>          mov    byte[rsi],'-'
    13 00000012 C646060A            <1> .l1      mov    byte[rsi+6],10
    14 00000016 BF05000000          <1>          mov    rdi,5
    15 0000001B 66BB0A00            <1>          mov    bx,10
    16 0000001F 6699                <1> .again:  cwd           ; расширили слово до двойного
    17 00000021 66F7F3              <1>          div    bx     ; делим результат на 10
    18 00000024 80C230              <1>          add    dl,30h ; получаем из остатка код цифры
    19 00000027 88143E              <1>          mov    [rsi+rdi],dl ; пишем символ в строку
    20 0000002A 48FFCF              <1>          dec    rdi    ; переводим указатель на  
    21                              <1>                        ; предыдущую позицию
    22 0000002D 6683F800            <1>          cmp    ax, 0  ; преобразовали все число?
    23 00000031 75EC                <1>          jne    .again
    24 00000033 B906000000          <1>          mov    rcx, 6
    25 00000038 4829F9              <1>          sub    rcx, rdi ; длина результата+знак
    26 0000003B 4889C8              <1> 		 mov    rax,rcx
    27 0000003E 48FFC0              <1> 		 inc    rax    ; длина результата+OA
    28 00000041 48FFC6              <1>          inc    rsi    ; пропускаем знак
    29 00000044 56                  <1> 		 push   rsi
    30 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; начало результата
    31 00000049 5F                  <1> 		 pop    rdi
    32 0000004A F3A4                <1>          rep movsb
    33 0000004C 5E                  <1>          pop    rsi  
    34 0000004D 59                  <1>          pop    rcx
    35 0000004E 5A                  <1>          pop    rdx
    36 0000004F 5B                  <1>          pop    rbx
    37 00000050 5F                  <1>          pop    rdi
    38 00000051 C3                  <1>          ret
    39                              <1> StrToInt64:
    40 00000052 57                  <1>          push   rdi
    41 00000053 B739                <1>          mov    bh, '9'
    42 00000055 B330                <1>          mov    bl, '0'
    43 00000057 56                  <1>          push   rsi     ; сохраняем адрес исходной строки
    44 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    45 0000005B 7503                <1>          jne    .prod
    46 0000005D 48FFC6              <1>          inc    rsi     ; пропускаем знак
    47 00000060 FC                  <1> .prod    cld
    48 00000061 6631FF              <1>          xor    di, di  ; обнуляем будущее число
    49 00000064 AC                  <1> .cycle:  lodsb          ; загружаем символ (цифру)
    50 00000065 3C0A                <1>          cmp    al, 10  ; если 10, то на конец
    51 00000067 741F                <1>          je     .Return
    52 00000069 38D8                <1>          cmp    al, bl  ; сравниваем с кодом нуля
    53 0000006B 722F                <1>          jb     .Error  ; "ниже" – Ошибка
    54 0000006D 38F8                <1>          cmp    al, bh  ; сравниваем с кодом девяти 
    55 0000006F 772B                <1>          ja     .Error  ; "выше" – Ошибка
    56 00000071 2C30                <1>          sub    al, 30h ; получаем цифру из символа
    57 00000073 6698                <1>          cbw            ; расширяем до слова
    58 00000075 6650                <1>          push   ax      ; сохраняем в стеке
    59 00000077 66B80A00            <1>          mov    ax, 10  ; заносим 10 в AX
    60 0000007B 66F7E7              <1>          mul    di      ; умножаем, результат в DX:AX
    61 0000007E 665F                <1>          pop    di      ; в DI – очередная цифра
    62 00000080 6601F8              <1>          add    ax, di
    63 00000083 6689C7              <1>          mov    di, ax  ; в DI – накопленное число        
    64 00000086 EBDC                <1>          jmp    .cycle
    65 00000088 5E                  <1> .Return: pop    rsi
    66 00000089 BB00000000          <1>          mov    rbx, 0
    67 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    68 00000091 7503                <1>          jne    .J
    69 00000093 66F7DF              <1>          neg    di
    70 00000096 6689F8              <1> .J       mov    ax, di
    71 00000099 98                  <1>          cwde
    72 0000009A EB0B                <1>          jmp    .R
    73 0000009C 5E                  <1> .Error:  pop    rsi
    74 0000009D B800000000          <1>          mov    rax, 0
    75 000000A2 BB01000000          <1>          mov    rbx, 1
    76 000000A7 5F                  <1> .R       pop    rdi
    77 000000A8 C3                  <1>          ret
     2                                  
     3                                  section .data
     4                                      ; РѕР±СЉСЏРІР»РµРЅРёРµ РјР°С‚СЂРёС†С‹ СЂР°Р·РјРµСЂРѕРј 4*7
     5 00000000 01020304050607          matrix db 1, 2, 3, 4, 5, 6, 7
     6 00000007 08090A0B0C0D0E                 db 8, 9, 10, 11, 12, 13, 14
     7 0000000E 0F101112131415                 db 15, 16, 17, 18, 19, 20, 21
     8 00000015 161718191A1B1C                 db 22, 23, 24, 25, 26, 27, 28
     9                                  ; СЃРµРіРјРµРЅС‚ РёРЅРёС†РёР°Р»РёР·РёСЂРѕРІР°РЅРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С…
    10                                  ; СЃРµРіРјРµРЅС‚ РЅРµРёРЅРёС†РёР°Р»РёР·РёСЂРѕРІР°РЅРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С…
    11                                  section .bss
    12 00000000 <res 0000000A>          OutBuf resb 10 ; Р±СѓС„РµСЂ РґР»СЏ РІРІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    13                                  lenOut equ $-OutBuf
    14 0000000A <res 00000004>          e resd 1
    15 0000000E <res 00000004>          b resd 1
    16 00000012 <res 00000004>          d resd 1
    17 00000016 <res 00000004>          g resd 1
    18 0000001A <res 00000004>          m resd 1
    19 0000001E <res 00000004>          cur resd 1
    20 00000022 <res 00000004>          result resd 1
    21 00000026 <res 0000000A>          InBuf resb 10
    22                                  lenIn equ $-InBuf
    23                                  ; lenIn equ $-InBuf
    24                                  
    25                                  
    26                                  section .text
    27                                  global _start
    28                                  _start:
    29 000000A9 B900000000              mov ecx, 0  ; РёРЅРёС†РёР°Р»РёР·Р°С†РёСЏ СЃС‡РµС‚С‡РёРєР° СЌР»РµРјРµРЅС‚РѕРІ РјР°С‚СЂРёС†С‹
    30                                  
    31                                  loop_start:
    32 000000AE 83F91C                      cmp ecx, 28  ; РїСЂРѕРІРµСЂРєР°, РґРѕСЃС‚РёРіРЅСѓС‚ Р»Рё РєРѕРЅРµС† РјР°С‚СЂРёС†С‹
    33 000000B1 7D3D                        jge loop_end
    34                                  
    35 000000B3 89C8                        mov eax, ecx  ; СЃРѕС…СЂР°РЅРµРЅРёРµ С‚РµРєСѓС‰РµРіРѕ РёРЅРґРµРєСЃР° СЃС‚РѕР»Р±С†Р°
    36 000000B5 BB07000000                  mov ebx, 7    ; СЃРѕС…СЂР°РЅРµРЅРёРµ РєРѕР»РёС‡РµСЃС‚РІР° СЃС‚РѕР»Р±С†РѕРІ РІ РјР°С‚СЂРёС†Рµ
    37 000000BA F7F3                        div ebx       ; РІС‹С‡РёСЃР»РµРЅРёРµ РёРЅРґРµРєСЃР° СЃС‚СЂРѕРєРё
    38                                  
    39 000000BC 01D8                        add eax, ebx  ; РІС‹С‡РёСЃР»РµРЅРёРµ СЃСѓРјРјС‹ РёРЅРґРµРєСЃРѕРІ
    40 000000BE 83F800                      cmp eax, 0
    41 000000C1 7529                        jne next
    42                                  
    43                                      ; РІС‹РІРѕРґ СЌР»РµРјРµРЅС‚Р° РјР°С‚СЂРёС†С‹
    44 000000C3 678B81[00000000]            mov eax, [matrix + ecx]
    45                                      ;mov [result], eax
    46                                      ; write
    47 000000CA 48BE-                       mov rsi, OutBuf ; Р°РґСЂРµСЃ РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    47 000000CC [0000000000000000] 
    48                                      ;mov rax, dl
    49 000000D4 98                          cwde
    50 000000D5 E826FFFFFF                  call IntToStr64
    51 000000DA 4889C5                      mov rbp, rax
    52 000000DD B801000000                  mov rax, 1 ; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 1 (write)
    53 000000E2 BF01000000                  mov rdi, 1 ; РґРµСЃРєСЂРёРїС‚РѕСЂ С„Р°Р№Р»Р° stdout=1
    54                                      ; mov rcx, rsi ; Р°РґСЂРµСЃ РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    55 000000E7 4889EA                      mov rdx, rbp ; РґР»РёРЅР° РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    56 000000EA 0F05                        syscall ; РІС‹Р·РѕРІ СЃРёСЃС‚РµРјРЅРѕР№ С„СѓРЅРєС†РёРё
    57                                  
    58                                  next:
    59 000000EC FFC1                        inc ecx       ; РїРµСЂРµС…РѕРґ Рє СЃР»РµРґСѓСЋС‰РµРјСѓ СЌР»РµРјРµРЅС‚Сѓ РјР°С‚СЂРёС†С‹
    60 000000EE EBBE                        jmp loop_start
    61                                  
    62                                  loop_end:
    63                                      ; Р·Р°РІРµСЂС€РµРЅРёРµ СЂР°Р±РѕС‚С‹ РїСЂРѕРіСЂР°РјРјС‹
    64 000000F0 C3                          ret
