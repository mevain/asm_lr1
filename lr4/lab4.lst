     1                                  %include "./lib64.asm"
     1                              <1>          section .text     ; сегмент кода
     2                              <1> IntToStr64: 
     3 00000000 57                  <1>          push   rdi
     4 00000001 53                  <1>          push   rbx
     5 00000002 52                  <1>          push   rdx
     6 00000003 51                  <1>          push   rcx
     7 00000004 56                  <1> 		 push   rsi
     8 00000005 C60600              <1> 		 mov    byte[rsi],0 ; на место знака
     9 00000008 83F800              <1>          cmp    eax,0
    10 0000000B 7D05                <1>          jge    .l1
    11 0000000D F7D8                <1>          neg    eax
    12 0000000F C6062D              <1>          mov    byte[rsi],'-'
    13 00000012 C646060A            <1> .l1      mov    byte[rsi+6],10
    14 00000016 BF05000000          <1>          mov    rdi,5
    15 0000001B 66BB0A00            <1>          mov    bx,10
    16 0000001F 6699                <1> .again:  cwd           ; расширили слово до двойного
    17 00000021 66F7F3              <1>          div    bx     ; делим результат на 10
    18 00000024 80C230              <1>          add    dl,30h ; получаем из остатка код цифры
    19 00000027 88143E              <1>          mov    [rsi+rdi],dl ; пишем символ в строку
    20 0000002A 48FFCF              <1>          dec    rdi    ; переводим указатель на  
    21                              <1>                        ; предыдущую позицию
    22 0000002D 6683F800            <1>          cmp    ax, 0  ; преобразовали все число?
    23 00000031 75EC                <1>          jne    .again
    24 00000033 B906000000          <1>          mov    rcx, 6
    25 00000038 4829F9              <1>          sub    rcx, rdi ; длина результата+знак
    26 0000003B 4889C8              <1> 		 mov    rax,rcx
    27 0000003E 48FFC0              <1> 		 inc    rax    ; длина результата+OA
    28 00000041 48FFC6              <1>          inc    rsi    ; пропускаем знак
    29 00000044 56                  <1> 		 push   rsi
    30 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; начало результата
    31 00000049 5F                  <1> 		 pop    rdi
    32 0000004A F3A4                <1>          rep movsb
    33 0000004C 5E                  <1>          pop    rsi  
    34 0000004D 59                  <1>          pop    rcx
    35 0000004E 5A                  <1>          pop    rdx
    36 0000004F 5B                  <1>          pop    rbx
    37 00000050 5F                  <1>          pop    rdi
    38 00000051 C3                  <1>          ret
    39                              <1> StrToInt64:
    40 00000052 57                  <1>          push   rdi
    41 00000053 B739                <1>          mov    bh, '9'
    42 00000055 B330                <1>          mov    bl, '0'
    43 00000057 56                  <1>          push   rsi     ; сохраняем адрес исходной строки
    44 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    45 0000005B 7503                <1>          jne    .prod
    46 0000005D 48FFC6              <1>          inc    rsi     ; пропускаем знак
    47 00000060 FC                  <1> .prod    cld
    48 00000061 6631FF              <1>          xor    di, di  ; обнуляем будущее число
    49 00000064 AC                  <1> .cycle:  lodsb          ; загружаем символ (цифру)
    50 00000065 3C0A                <1>          cmp    al, 10  ; если 10, то на конец
    51 00000067 741F                <1>          je     .Return
    52 00000069 38D8                <1>          cmp    al, bl  ; сравниваем с кодом нуля
    53 0000006B 722F                <1>          jb     .Error  ; "ниже" – Ошибка
    54 0000006D 38F8                <1>          cmp    al, bh  ; сравниваем с кодом девяти 
    55 0000006F 772B                <1>          ja     .Error  ; "выше" – Ошибка
    56 00000071 2C30                <1>          sub    al, 30h ; получаем цифру из символа
    57 00000073 6698                <1>          cbw            ; расширяем до слова
    58 00000075 6650                <1>          push   ax      ; сохраняем в стеке
    59 00000077 66B80A00            <1>          mov    ax, 10  ; заносим 10 в AX
    60 0000007B 66F7E7              <1>          mul    di      ; умножаем, результат в DX:AX
    61 0000007E 665F                <1>          pop    di      ; в DI – очередная цифра
    62 00000080 6601F8              <1>          add    ax, di
    63 00000083 6689C7              <1>          mov    di, ax  ; в DI – накопленное число        
    64 00000086 EBDC                <1>          jmp    .cycle
    65 00000088 5E                  <1> .Return: pop    rsi
    66 00000089 BB00000000          <1>          mov    rbx, 0
    67 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    68 00000091 7503                <1>          jne    .J
    69 00000093 66F7DF              <1>          neg    di
    70 00000096 6689F8              <1> .J       mov    ax, di
    71 00000099 98                  <1>          cwde
    72 0000009A EB0B                <1>          jmp    .R
    73 0000009C 5E                  <1> .Error:  pop    rsi
    74 0000009D B800000000          <1>          mov    rax, 0
    75 000000A2 BB01000000          <1>          mov    rbx, 1
    76 000000A7 5F                  <1> .R       pop    rdi
    77 000000A8 C3                  <1>          ret
     2                                  
     3                                  section .data
     4                                  ; СЃРµРіРјРµРЅС‚ РёРЅРёС†РёР°Р»РёР·РёСЂРѕРІР°РЅРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С…
     5 00000000 4572726F723A206469-     ExitMsg db "Error: division to zero",10
     5 00000009 766973696F6E20746F-
     5 00000012 207A65726F0A       
     6                                  lenExit equ $-ExitMsg
     7                                  ; СЃРµРіРјРµРЅС‚ РЅРµРёРЅРёС†РёР°Р»РёР·РёСЂРѕРІР°РЅРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С…
     8                                  section .bss
     9 00000000 <res 00000004>          cur resd 1
    10 00000004 <res 0000000A>          OutBuf resb 10 ; Р±СѓС„РµСЂ РґР»СЏ РІРІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    11                                  lenOut equ $-OutBuf
    12 0000000E <res 0000001C>          mas resb 28
    13 0000002A <res 0000000A>          InBuf resb 10
    14                                  lenIn equ $-InBuf
    15                                  
    16                                  section .text
    17                                  global _start
    18                                  _start:
    19 000000A9 BF00000000                      mov edi, 0
    20 000000AE B907000000                      mov ecx, 7 ; РєРѕР»РёС‡РµСЃС‚РІРѕ СЃС‚РѕР»Р±С†РѕРІ
    21                                  cycle3: 
    22 000000B3 51                              push rcx
    23 000000B4 B904000000                      mov ecx, 4 ; РєРѕР»РёС‡РµСЃС‚РІРѕ СЃС‚СЂРѕРє
    24 000000B9 BB00000000                      mov ebx, 0
    25 000000BE B800000000              cycle4: mov rax, 0
    26 000000C3 BF00000000                      mov rdi, 0
    27 000000C8 48BE-                           mov rsi, InBuf
    27 000000CA [2A00000000000000] 
    28 000000D2 BA04000000                      mov rdx, 4
    29                                          mov al, ecx
    29          ******************       error: invalid combination of opcode and operands
    30 000000D7 0F05                            syscall
    31                                          mov ecx, al
    31          ******************       error: invalid combination of opcode and operands
    32 000000D9 48BE-                           mov rsi, InBuf
    32 000000DB [2A00000000000000] 
    33 000000E3 E86AFFFFFF                      call StrToInt64
    34 000000E8 674889843B-                     mov [ebx+edi+mas], rax
    34 000000ED [0E000000]         
    35 000000F1 83C307                          add ebx, 7
    36 000000F4 E2C8                            loop cycle4
    37 000000F6 59                              pop rcx
    38 000000F7 FFC7                            inc edi
    39 000000F9 E2B8                            loop cycle3
    40                                  
    41                                          ; РІС‹РІРѕРґ РЅСѓР¶РЅС‹С… СЌР»РµРјРµРЅС‚РѕРІ
    42 000000FB BF00000000                      mov edi, 0
    43 00000100 B907000000                      mov ecx, 7 ; РєРѕР»РёС‡РµСЃС‚РІРѕ СЃС‚РѕР»Р±С†РѕРІ
    44                                  cycle1: 
    45 00000105 51                              push rcx
    46 00000106 B904000000                      mov ecx, 4 ; РєРѕР»РёС‡РµСЃС‚РІРѕ СЃС‚СЂРѕРє
    47 0000010B BB00000000                      mov ebx, 0
    48 00000110 89D8                    cycle2: mov eax, ebx
    49 00000112 01C8                            add eax, ecx
    50 00000114 B303                            mov bl, 3
    51 00000116 890425[00000000]                mov [cur], eax
    52 0000011D 381C25[00000000]                cmp [cur], bl
    53 00000124 75EA                            jne cycle2
    54 00000126 48BE-                           mov rsi, OutBuf ; Р°РґСЂРµСЃ РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    54 00000128 [0400000000000000] 
    55 00000130 67488B843B-                     mov rax, [ebx+edi+mas]
    55 00000135 [0E000000]         
    56 00000139 98                              cwde
    57 0000013A E8C1FEFFFF                      call IntToStr64
    58 0000013F 4889C5                          mov rbp, rax
    59 00000142 B801000000                      mov rax, 1 ; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 1 (write)
    60 00000147 BF01000000                      mov rdi, 1 ; РґРµСЃРєСЂРёРїС‚РѕСЂ С„Р°Р№Р»Р° stdout=1
    61 0000014C 4889EA                          mov rdx, rbp ; РґР»РёРЅР° РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    62 0000014F 0F05                            syscall ; РІС‹Р·РѕРІ СЃРёСЃС‚РµРјРЅРѕР№ С„СѓРЅРєС†РёРё
    63 00000151 83C307                          add ebx, 7
    64 00000154 E2BA                            loop cycle2
    65 00000156 59                              pop rcx
    66 00000157 FFC7                            inc edi
    67 00000159 E2AA                            loop cycle1
    68                                  
    69                                          ;exit
    70 0000015B B83C000000                      mov rax, 60 ; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 60 (exit)
    71 00000160 4831FF                          xor rdi, rdi ; return code 0
    72 00000163 0F05                            syscall
