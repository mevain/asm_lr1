     1                                  %include "./lib64.asm"
     1                              <1>          section .text     ; сегмент кода
     2                              <1> IntToStr64: 
     3 00000000 57                  <1>          push   rdi
     4 00000001 53                  <1>          push   rbx
     5 00000002 52                  <1>          push   rdx
     6 00000003 51                  <1>          push   rcx
     7 00000004 56                  <1> 		 push   rsi
     8 00000005 C60600              <1> 		 mov    byte[rsi],0 ; на место знака
     9 00000008 83F800              <1>          cmp    eax,0
    10 0000000B 7D05                <1>          jge    .l1
    11 0000000D F7D8                <1>          neg    eax
    12 0000000F C6062D              <1>          mov    byte[rsi],'-'
    13 00000012 C646060A            <1> .l1      mov    byte[rsi+6],10
    14 00000016 BF05000000          <1>          mov    rdi,5
    15 0000001B 66BB0A00            <1>          mov    bx,10
    16 0000001F 6699                <1> .again:  cwd           ; расширили слово до двойного
    17 00000021 66F7F3              <1>          div    bx     ; делим результат на 10
    18 00000024 80C230              <1>          add    dl,30h ; получаем из остатка код цифры
    19 00000027 88143E              <1>          mov    [rsi+rdi],dl ; пишем символ в строку
    20 0000002A 48FFCF              <1>          dec    rdi    ; переводим указатель на  
    21                              <1>                        ; предыдущую позицию
    22 0000002D 6683F800            <1>          cmp    ax, 0  ; преобразовали все число?
    23 00000031 75EC                <1>          jne    .again
    24 00000033 B906000000          <1>          mov    rcx, 6
    25 00000038 4829F9              <1>          sub    rcx, rdi ; длина результата+знак
    26 0000003B 4889C8              <1> 		 mov    rax,rcx
    27 0000003E 48FFC0              <1> 		 inc    rax    ; длина результата+OA
    28 00000041 48FFC6              <1>          inc    rsi    ; пропускаем знак
    29 00000044 56                  <1> 		 push   rsi
    30 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; начало результата
    31 00000049 5F                  <1> 		 pop    rdi
    32 0000004A F3A4                <1>          rep movsb
    33 0000004C 5E                  <1>          pop    rsi  
    34 0000004D 59                  <1>          pop    rcx
    35 0000004E 5A                  <1>          pop    rdx
    36 0000004F 5B                  <1>          pop    rbx
    37 00000050 5F                  <1>          pop    rdi
    38 00000051 C3                  <1>          ret
    39                              <1> StrToInt64:
    40 00000052 57                  <1>          push   rdi
    41 00000053 B739                <1>          mov    bh, '9'
    42 00000055 B330                <1>          mov    bl, '0'
    43 00000057 56                  <1>          push   rsi     ; сохраняем адрес исходной строки
    44 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    45 0000005B 7503                <1>          jne    .prod
    46 0000005D 48FFC6              <1>          inc    rsi     ; пропускаем знак
    47 00000060 FC                  <1> .prod    cld
    48 00000061 6631FF              <1>          xor    di, di  ; обнуляем будущее число
    49 00000064 AC                  <1> .cycle:  lodsb          ; загружаем символ (цифру)
    50 00000065 3C0A                <1>          cmp    al, 10  ; если 10, то на конец
    51 00000067 741F                <1>          je     .Return
    52 00000069 38D8                <1>          cmp    al, bl  ; сравниваем с кодом нуля
    53 0000006B 722F                <1>          jb     .Error  ; "ниже" – Ошибка
    54 0000006D 38F8                <1>          cmp    al, bh  ; сравниваем с кодом девяти 
    55 0000006F 772B                <1>          ja     .Error  ; "выше" – Ошибка
    56 00000071 2C30                <1>          sub    al, 30h ; получаем цифру из символа
    57 00000073 6698                <1>          cbw            ; расширяем до слова
    58 00000075 6650                <1>          push   ax      ; сохраняем в стеке
    59 00000077 66B80A00            <1>          mov    ax, 10  ; заносим 10 в AX
    60 0000007B 66F7E7              <1>          mul    di      ; умножаем, результат в DX:AX
    61 0000007E 665F                <1>          pop    di      ; в DI – очередная цифра
    62 00000080 6601F8              <1>          add    ax, di
    63 00000083 6689C7              <1>          mov    di, ax  ; в DI – накопленное число        
    64 00000086 EBDC                <1>          jmp    .cycle
    65 00000088 5E                  <1> .Return: pop    rsi
    66 00000089 BB00000000          <1>          mov    rbx, 0
    67 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    68 00000091 7503                <1>          jne    .J
    69 00000093 66F7DF              <1>          neg    di
    70 00000096 6689F8              <1> .J       mov    ax, di
    71 00000099 98                  <1>          cwde
    72 0000009A EB0B                <1>          jmp    .R
    73 0000009C 5E                  <1> .Error:  pop    rsi
    74 0000009D B800000000          <1>          mov    rax, 0
    75 000000A2 BB01000000          <1>          mov    rbx, 1
    76 000000A7 5F                  <1> .R       pop    rdi
    77 000000A8 C3                  <1>          ret
     2                                  
     3                                  section .data
     4                                  ; СЃРµРіРјРµРЅС‚ РёРЅРёС†РёР°Р»РёР·РёСЂРѕРІР°РЅРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С…
     5                                  ; СЃРµРіРјРµРЅС‚ РЅРµРёРЅРёС†РёР°Р»РёР·РёСЂРѕРІР°РЅРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С…
     6                                  section .bss
     7 00000000 <res 0000000A>          OutBuf resb 10 ; Р±СѓС„РµСЂ РґР»СЏ РІРІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
     8                                  lenOut equ $-OutBuf
     9 0000000A <res 00000004>          a resd 1
    10 0000000E <res 00000004>          b resd 1
    11 00000012 <res 00000004>          cur1 resd 1
    12 00000016 <res 00000004>          cur2 resd 1
    13 0000001A <res 00000004>          cur3 resd 1
    14 0000001E <res 00000004>          cur4 resd 1
    15 00000022 <res 0000000A>          InBuf resb 10
    16                                  lenIn equ $-InBuf
    17                                  ; lenIn equ $-InBuf
    18                                  section .text
    19                                  global _start
    20                                  _start:
    21                                  
    22                                      ;write
    23 000000A9 B800000000                  mov rax, 0
    24 000000AE BF00000000                  mov rdi, 0
    25 000000B3 48BE-                       mov rsi, InBuf
    25 000000B5 [2200000000000000] 
    26 000000BD BA04000000                  mov rdx, 4
    27 000000C2 0F05                        syscall
    28 000000C4 48BE-                       mov rsi, InBuf
    28 000000C6 [2200000000000000] 
    29 000000CE E87FFFFFFF                  call StrToInt64
    30 000000D3 48890425[0A000000]          mov [a], rax
    31                                  
    32 000000DB B800000000                  mov rax, 0
    33 000000E0 BF00000000                  mov rdi, 0
    34 000000E5 48BE-                       mov rsi, InBuf
    34 000000E7 [2200000000000000] 
    35 000000EF BA04000000                  mov rdx, 4
    36 000000F4 0F05                        syscall
    37 000000F6 48BE-                       mov rsi, InBuf
    37 000000F8 [2200000000000000] 
    38 00000100 E84DFFFFFF                  call StrToInt64
    39 00000105 48890425[0E000000]          mov [b], rax
    40                                  
    41 0000010D 8B0425[0A000000]            mov eax, [a]
    42 00000114 2B0425[0E000000]            sub eax, [b]
    43 0000011B 890425[12000000]            mov [cur1], eax
    44                                  
    45 00000122 8B0425[0A000000]            mov eax, [a]
    46 00000129 030425[0E000000]            add eax, [b]
    47 00000130 890425[16000000]            mov [cur2], eax
    48                                      
    49 00000137 8B0425[0A000000]            mov eax, [a]
    50 0000013E 8B1C25[0E000000]            mov ebx, [b]
    51 00000145 98                          cwde
    52 00000146 F7FB                        idiv ebx
    53 00000148 890425[1A000000]            mov [cur3], eax
    54                                  
    55 0000014F 8B0425[16000000]            mov eax, [cur2]
    56 00000156 BA00000000                  mov edx, 0
    57 0000015B 8B1C25[12000000]            mov ebx, [cur1]
    58 00000162 98                          cwde
    59 00000163 F7FB                        idiv ebx
    60 00000165 890425[1E000000]            mov [cur4], eax
    61                                  
    62 0000016C 8B0425[1E000000]            mov eax, [cur4]
    63 00000173 3B0425[1A000000]            cmp eax, [cur3]
    64 0000017A 7F02                        jg greater
    65 0000017C 7C34                        jl less
    66                                  
    67                                      greater:     ; write
    68 0000017E 48BE-                               mov rsi, OutBuf ; Р°РґСЂРµСЃ РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    68 00000180 [0000000000000000] 
    69 00000188 488B0425[16000000]                  mov rax, [cur2]
    70 00000190 98                                  cwde
    71 00000191 E86AFEFFFF                          call IntToStr64
    72 00000196 4889C5                              mov rbp, rax
    73 00000199 B801000000                          mov rax, 1 ; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 1 (write)
    74 0000019E BF01000000                          mov rdi, 1 ; РґРµСЃРєСЂРёРїС‚РѕСЂ С„Р°Р№Р»Р° stdout=1
    75                                              ; mov rcx, rsi ; Р°РґСЂРµСЃ РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    76 000001A3 4889EA                              mov rdx, rbp ; РґР»РёРЅР° РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    77 000001A6 0F05                                syscall ; РІС‹Р·РѕРІ СЃРёСЃС‚РµРјРЅРѕР№ С„СѓРЅРєС†РёРё
    78 000001A8 B83C000000                          mov rax, 60 ; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 60 (exit)
    79 000001AD 4831FF                              xor rdi, rdi ; return code 0
    80 000001B0 0F05                                syscall
    81                                  
    82                                      less:     ; write
    83 000001B2 48BE-                               mov rsi, OutBuf ; Р°РґСЂРµСЃ РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    83 000001B4 [0000000000000000] 
    84 000001BC 488B0425[12000000]                  mov rax, [cur1]
    85 000001C4 98                                  cwde
    86 000001C5 E836FEFFFF                          call IntToStr64
    87 000001CA 4889C5                              mov rbp, rax
    88 000001CD B801000000                          mov rax, 1 ; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 1 (write)
    89 000001D2 BF01000000                          mov rdi, 1 ; РґРµСЃРєСЂРёРїС‚РѕСЂ С„Р°Р№Р»Р° stdout=1
    90                                              ; mov rcx, rsi ; Р°РґСЂРµСЃ РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    91 000001D7 4889EA                              mov rdx, rbp ; РґР»РёРЅР° РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    92 000001DA 0F05                                syscall ; РІС‹Р·РѕРІ СЃРёСЃС‚РµРјРЅРѕР№ С„СѓРЅРєС†РёРё
    93 000001DC B83C000000                          mov rax, 60 ; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 60 (exit)
    94 000001E1 4831FF                              xor rdi, rdi ; return code 0
    95 000001E4 0F05                                syscall
