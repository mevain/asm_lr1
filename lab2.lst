     1                                  %include "./lib64.asm"
     1                              <1>          section .text     ; сегмент кода
     2                              <1> IntToStr64: 
     3 00000000 57                  <1>          push   rdi
     4 00000001 53                  <1>          push   rbx
     5 00000002 52                  <1>          push   rdx
     6 00000003 51                  <1>          push   rcx
     7 00000004 56                  <1> 		 push   rsi
     8 00000005 C60600              <1> 		 mov    byte[rsi],0 ; на место знака
     9 00000008 83F800              <1>          cmp    eax,0
    10 0000000B 7D05                <1>          jge    .l1
    11 0000000D F7D8                <1>          neg    eax
    12 0000000F C6062D              <1>          mov    byte[rsi],'-'
    13 00000012 C646060A            <1> .l1      mov    byte[rsi+6],10
    14 00000016 BF05000000          <1>          mov    rdi,5
    15 0000001B 66BB0A00            <1>          mov    bx,10
    16 0000001F 6699                <1> .again:  cwd           ; расширили слово до двойного
    17 00000021 66F7F3              <1>          div    bx     ; делим результат на 10
    18 00000024 80C230              <1>          add    dl,30h ; получаем из остатка код цифры
    19 00000027 88143E              <1>          mov    [rsi+rdi],dl ; пишем символ в строку
    20 0000002A 48FFCF              <1>          dec    rdi    ; переводим указатель на  
    21                              <1>                        ; предыдущую позицию
    22 0000002D 6683F800            <1>          cmp    ax, 0  ; преобразовали все число?
    23 00000031 75EC                <1>          jne    .again
    24 00000033 B906000000          <1>          mov    rcx, 6
    25 00000038 4829F9              <1>          sub    rcx, rdi ; длина результата+знак
    26 0000003B 4889C8              <1> 		 mov    rax,rcx
    27 0000003E 48FFC0              <1> 		 inc    rax    ; длина результата+OA
    28 00000041 48FFC6              <1>          inc    rsi    ; пропускаем знак
    29 00000044 56                  <1> 		 push   rsi
    30 00000045 488D343E            <1>          lea    rsi,[rsi+rdi] ; начало результата
    31 00000049 5F                  <1> 		 pop    rdi
    32 0000004A F3A4                <1>          rep movsb
    33 0000004C 5E                  <1>          pop    rsi  
    34 0000004D 59                  <1>          pop    rcx
    35 0000004E 5A                  <1>          pop    rdx
    36 0000004F 5B                  <1>          pop    rbx
    37 00000050 5F                  <1>          pop    rdi
    38 00000051 C3                  <1>          ret
    39                              <1> StrToInt64:
    40 00000052 57                  <1>          push   rdi
    41 00000053 B739                <1>          mov    bh, '9'
    42 00000055 B330                <1>          mov    bl, '0'
    43 00000057 56                  <1>          push   rsi     ; сохраняем адрес исходной строки
    44 00000058 803E2D              <1>          cmp    byte[rsi], '-'
    45 0000005B 7503                <1>          jne    .prod
    46 0000005D 48FFC6              <1>          inc    rsi     ; пропускаем знак
    47 00000060 FC                  <1> .prod    cld
    48 00000061 6631FF              <1>          xor    di, di  ; обнуляем будущее число
    49 00000064 AC                  <1> .cycle:  lodsb          ; загружаем символ (цифру)
    50 00000065 3C0A                <1>          cmp    al, 10  ; если 10, то на конец
    51 00000067 741F                <1>          je     .Return
    52 00000069 38D8                <1>          cmp    al, bl  ; сравниваем с кодом нуля
    53 0000006B 722F                <1>          jb     .Error  ; "ниже" – Ошибка
    54 0000006D 38F8                <1>          cmp    al, bh  ; сравниваем с кодом девяти 
    55 0000006F 772B                <1>          ja     .Error  ; "выше" – Ошибка
    56 00000071 2C30                <1>          sub    al, 30h ; получаем цифру из символа
    57 00000073 6698                <1>          cbw            ; расширяем до слова
    58 00000075 6650                <1>          push   ax      ; сохраняем в стеке
    59 00000077 66B80A00            <1>          mov    ax, 10  ; заносим 10 в AX
    60 0000007B 66F7E7              <1>          mul    di      ; умножаем, результат в DX:AX
    61 0000007E 665F                <1>          pop    di      ; в DI – очередная цифра
    62 00000080 6601F8              <1>          add    ax, di
    63 00000083 6689C7              <1>          mov    di, ax  ; в DI – накопленное число        
    64 00000086 EBDC                <1>          jmp    .cycle
    65 00000088 5E                  <1> .Return: pop    rsi
    66 00000089 BB00000000          <1>          mov    rbx, 0
    67 0000008E 803E2D              <1>          cmp    byte[rsi], '-'
    68 00000091 7503                <1>          jne    .J
    69 00000093 66F7DF              <1>          neg    di
    70 00000096 6689F8              <1> .J       mov    ax, di
    71 00000099 98                  <1>          cwde
    72 0000009A EB0B                <1>          jmp    .R
    73 0000009C 5E                  <1> .Error:  pop    rsi
    74 0000009D B800000000          <1>          mov    rax, 0
    75 000000A2 BB01000000          <1>          mov    rbx, 1
    76 000000A7 5F                  <1> .R       pop    rdi
    77 000000A8 C3                  <1>          ret
     2                                  
     3                                  section .data
     4                                  ; СЃРµРіРјРµРЅС‚ РёРЅРёС†РёР°Р»РёР·РёСЂРѕРІР°РЅРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С…
     5                                  ; СЃРµРіРјРµРЅС‚ РЅРµРёРЅРёС†РёР°Р»РёР·РёСЂРѕРІР°РЅРЅС‹С… РїРµСЂРµРјРµРЅРЅС‹С…
     6                                  section .bss
     7 00000000 <res 0000000A>          OutBuf resb 10 ; Р±СѓС„РµСЂ РґР»СЏ РІРІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
     8                                  lenOut equ $-OutBuf
     9 0000000A <res 00000004>          e resd 1
    10 0000000E <res 00000004>          b resd 1
    11 00000012 <res 00000004>          d resd 1
    12 00000016 <res 00000004>          g resd 1
    13 0000001A <res 00000004>          m resd 1
    14 0000001E <res 00000004>          cur resd 1
    15 00000022 <res 00000004>          result resd 1
    16 00000026 <res 0000000A>          InBuf resb 10
    17                                  lenIn equ $-InBuf
    18                                  ; lenIn equ $-InBuf
    19 00000030 642069732065717561-     ZeroMsg db "d is equal zero",10
    19 00000039 6C207A65726F0A     
    19          ******************       warning: attempt to initialize memory in BSS section `.bss': ignored [-w+other]
    19          ******************       warning: attempt to initialize memory in BSS section `.bss': ignored [-w+other]
    20                                  lenZero equ $-ZeroMsg
    21                                  section .text
    22                                  global _start
    23                                  _start:
    24                                  
    25                                      ;write
    26                                      ;read e
    27 000000A9 B800000000                  mov rax, 0
    28 000000AE BF00000000                  mov rdi, 0
    29 000000B3 48BE-                       mov rsi, InBuf
    29 000000B5 [2600000000000000] 
    30 000000BD BA04000000                  mov rdx, 4
    31 000000C2 0F05                        syscall
    32 000000C4 48BE-                       mov rsi, InBuf
    32 000000C6 [2600000000000000] 
    33 000000CE E87FFFFFFF                  call StrToInt64
    34 000000D3 48890425[0A000000]          mov [e], rax
    35                                  
    36 000000DB B800000000                  mov rax, 0
    37 000000E0 BF00000000                  mov rdi, 0
    38 000000E5 48BE-                       mov rsi, InBuf
    38 000000E7 [2600000000000000] 
    39 000000EF BA04000000                  mov rdx, 4
    40 000000F4 0F05                        syscall
    41 000000F6 48BE-                       mov rsi, InBuf
    41 000000F8 [2600000000000000] 
    42 00000100 E84DFFFFFF                  call StrToInt64
    43 00000105 48890425[0E000000]          mov [b], rax
    44                                  
    45 0000010D B800000000                  mov rax, 0
    46 00000112 BF00000000                  mov rdi, 0
    47 00000117 48BE-                       mov rsi, InBuf
    47 00000119 [2600000000000000] 
    48 00000121 BA04000000                  mov rdx, 4
    49 00000126 0F05                        syscall
    50 00000128 48BE-                       mov rsi, InBuf
    50 0000012A [2600000000000000] 
    51 00000132 E81BFFFFFF                  call StrToInt64
    52 00000137 48890425[12000000]          mov [d], rax
    53 0000013F 83F800                      cmp eax, 0; РїСЂРѕРІРµСЂРєР° РєРѕРґР° РѕС€РёР±РєРё
    54 00000142 0F84D6000000                je exit
    55                                  
    56 00000148 B800000000                  mov rax, 0
    57 0000014D BF00000000                  mov rdi, 0
    58 00000152 48BE-                       mov rsi, InBuf
    58 00000154 [2600000000000000] 
    59 0000015C BA04000000                  mov rdx, 4
    60 00000161 0F05                        syscall
    61 00000163 48BE-                       mov rsi, InBuf
    61 00000165 [2600000000000000] 
    62 0000016D E8E0FEFFFF                  call StrToInt64
    63 00000172 48890425[16000000]          mov [g], rax
    64                                  
    65 0000017A B800000000                  mov rax, 0
    66 0000017F BF00000000                  mov rdi, 0
    67 00000184 48BE-                       mov rsi, InBuf
    67 00000186 [2600000000000000] 
    68 0000018E BA04000000                  mov rdx, 4
    69 00000193 0F05                        syscall
    70 00000195 48BE-                       mov rsi, InBuf
    70 00000197 [2600000000000000] 
    71 0000019F E8AEFEFFFF                  call StrToInt64
    72 000001A4 48890425[1A000000]          mov [m], rax
    73                                  
    74 000001AC 8B0425[0A000000]            mov eax, [e]
    75                                      ;mov ebx, [b]
    76 000001B3 2B0425[0E000000]            sub eax, [b]
    77 000001BA 89C3                        mov ebx, eax
    78 000001BC 8B1C25[12000000]            mov ebx, [d]
    79                                      ;mul ebx
    80 000001C3 98                          cwde
    81 000001C4 F7FB                        idiv ebx
    82 000001C6 890425[22000000]            mov [result], eax ;Р·РґРµСЃСЊ СЂРµР·СѓР»СЊС‚Р°С‚ РґРµР»РµРЅРёСЏ (e-b)/d
    83                                  
    84 000001CD 8B0425[16000000]            mov eax, [g]
    85 000001D4 F7E8                        imul eax
    86 000001D6 8B1C25[1A000000]            mov ebx, [m]
    87 000001DD F7EB                        imul ebx
    88 000001DF 89C3                        mov ebx, eax
    89 000001E1 8B0425[22000000]            mov eax, [result]
    90 000001E8 29D8                        sub eax, ebx
    91 000001EA 83E802                      sub eax, 2
    92 000001ED 890425[22000000]            mov [result], eax
    93                                      ; write
    94 000001F4 48BE-                       mov rsi, OutBuf ; Р°РґСЂРµСЃ РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
    94 000001F6 [0000000000000000] 
    95 000001FE 488B0425[22000000]          mov rax, [result]
    96 00000206 98                          cwde
    97 00000207 E8F4FDFFFF                  call IntToStr64
    98 0000020C 4889C5                      mov rbp, rax
    99 0000020F B801000000                  mov rax, 1 ; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 1 (write)
   100 00000214 BF01000000                  mov rdi, 1 ; РґРµСЃРєСЂРёРїС‚РѕСЂ С„Р°Р№Р»Р° stdout=1
   101                                      ; mov rcx, rsi ; Р°РґСЂРµСЃ РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
   102 00000219 4889EA                      mov rdx, rbp ; РґР»РёРЅР° РІС‹РІРѕРґРёРјРѕР№ СЃС‚СЂРѕРєРё
   103 0000021C 0F05                        syscall ; РІС‹Р·РѕРІ СЃРёСЃС‚РµРјРЅРѕР№ С„СѓРЅРєС†РёРё
   104                                      exit:
   105 0000021E B83C000000                      mov rax, 60 ; СЃРёСЃС‚РµРјРЅР°СЏ С„СѓРЅРєС†РёСЏ 60 (exit)
   106 00000223 4831FF                          xor rdi, rdi ; return code 0
   107 00000226 0F05                            syscall
